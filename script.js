
/*console.log('Привет!'); // выводит данные в консоль; для отладки
alert(2/0);//выводится модальное окно с сообщением */


var firstname; // var - объявление переменной. Содержит буквы, _, $. 
//Должно иметь смысл. Регистр имеет значение. 

var nam = 1; // объявление переменной и присваивание ей значения (число).
var float = 1.2 // число с плавающей точкой.
//В js к типу number относятся и целые числа, и с плав. точкой.
console.log(5/0); //Infinity
console.log('не число'/3); //Nan - вычислительная ошибка, 
//результат неправильной или неопределённой математической операци


var str1 = 'Hello!'; // объявление переменной и присваивание значения (строка)
// можно двойные ковычки

console.log('"Привет!"'); // Ковычки внутри ковычек: "..." внутри ''
console.log("\"Привет!\""); // Экранирование ковычек.


var name = 'Nastya'; 
alert( `Привет, ${name}!` ); // `...` позволяют встраивать выражения в строку, 
//заключая их в ${...}.

console.log( `Результат = ${2+7}` ); // Вывод в консоли : Результат = 9.
console.log(typeof str1); // typeof  выводит тип данных

var str2 = 'friends';
console.log(str1+str2);// сложение (конкатенация) строк

console.log(str1+2);//сложение строки и числа (number -> string)
console.log(str1*str2);//результат - Nan
console.log('100'+'200');//результат - 100200 (объединение строк)
console.log(+'100'+ +'200');// результат - 300
// Почитать подробнее про преобразование стринг в намбер!!!




var bool = true; // булевый тип данных; имеет два типа значений: true/ false.
console.log(!bool);// ! - логическое НЕ

//Операторы сравнения
console.log(2 == '2'); // true
console.log(2 === '2'); // false; строгое =, сравнение по типу данных



var sum = null; // переменная неизвестна или не имеет значения.

// тип данных - undefined
var x;
console.log(x); // переменная объявлена, но ей не присвоено значение. 
//Результат в консоли: undefined. 
// Обычно используется для проверок, было ли присвоено значение переменной.

// тип данных - object. 
//Объект - это коллекция свойств,представленных в виде пар ключ и значение.
var object = {
	a: 5,
	b: 'Word',
	c: false,
	d: {
		e: 123,
		f: 456,
	},
	z: [1, 2, 3, 4]
};

object.b = 'World'; // изменение свойства объекта
object.x = 'name'; // добавление нового свойства
object['new'] = 'NEW'; // добавление нового св-ва
// если название св-ва состоит из двух слов, обратиться через точку к нему нельзя
console.log(object.b); // вывод свойства b объекта
console.log(object); // вывод объекта. Добавится св-во х и измненится b.

//Массивы
var arr = [1, 2, 'abc', false, {x: 11, y: 12}, ['a', 'b']]; 
// массив может содержать данные любого типа
console.log(arr); // вывод массива
// Массив - это объект, у к-го в виде ключа - номер эл-та в массиве
console.log(arr[5]); // вывод элемента массива
console.log(arr[6]); // эл-т не существует - undefined




var square = function(number) { return number * number; };
console.log(square(2.5)); // квадрат числа

//Регулярные выражения
var  reg1 = new RegExp('abc'); // определение шаблона с помощью создания объекта RegExp
console.log(reg1.test('abcd')); // проверка. Результат - true.
console.log(reg1.test('qwwertyabc')); // true
console.log(reg1.test('qwwerty')); // false

var reg2 = /abc/; // определение шаблона с помощью литералов /.../
console.log(/^abc/.test('abcqwert')); // ^ - найти строки, к-ые начинаются с "abc"; true
console.log(/abc$/.test('qwert abc')); // $ - найти строки, к-ые заканч-ся на "abc"; true
console.log(/^abc$/.test('abcde')); // ^..$ - найти строку, к-ая полностью совпадает с шаблоном; false
console.log(/[a-z]/.test('b')); // поиск по диапазону; true

// Рассмотреть подробнее регулярные выражения! 

var error = Error('Not found'); // Ошибка

// Рассмотреть подробнее






